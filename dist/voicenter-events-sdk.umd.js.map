{"version":3,"file":"voicenter-events-sdk.umd.js","sources":["../src/eventTypes.js","../src/config.js","../src/Logger.js","../node_modules/lodash/isObject.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_root.js","../node_modules/lodash/now.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/debounce.js","../src/store/handleStoreEvents.js","../src/utils/statusTypes.js","../src/store/extensions.js","../src/sdk.js","../src/utils.js","../src/index.js"],"sourcesContent":["export default {\n  LOGIN_STATUS: 'loginStatus',\n  LOGIN: 'login',\n  LOGIN_USER: 'loginUser',\n  LOGIN_CODE: 'loginUserCode',\n  LOGIN_ACCOUNT: 'loginAccount',\n  LOGIN_RESPONSE: 'loginResponse',\n  QUEUE_EVENT: 'QueueEvent',\n  QUEUES_UPDATED: 'QueuesUpdated',\n  DIALERS_UPDATED: 'DialersUpdated',\n  EXTENSION_EVENT: 'ExtensionEvent',\n  EXTENSION_UPDATED: 'ExtensionsUpdated',\n  ALL_EXTENSION_STATUS: 'AllExtensionsStatus',\n  CONNECT_ERROR: 'connect_error',\n  CONNECT_TIMEOUT: 'connect_timeout',\n  DISCONNECT: 'disconnect',\n  PONG: 'pong',\n  RECONNECT: 'reconnect',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RESYNC: 'resync',\n  RECONNECTING: 'reconnecting',\n  RECONNECT_ERROR: 'reconnect_error',\n  RECONNECT_FAILED: 'reconnect_failed',\n  KEEP_ALIVE: 'keepalive',\n  KEEP_ALIVE_RESPONSE: 'keepaliveResponse',\n  CLOSE: 'closeme',\n  ERROR: 'error',\n}\n","export const defaultServers = [{\n  'URLID': 59,\n  'Priority': 5,\n  'Version': 2,\n  'Domain': 'monitor1.voicenter.co'\n}, {\n  'URLID': 3,\n  'Priority': 4,\n  'Version': 2,\n  'Domain': 'monitor3.voicenter.co.il'\n}, {\n  'URLID': 4,\n  'Priority': 3,\n  'Version': 2,\n  'Domain': 'monitor4.voicenter.co.il'\n}, {\n  'URLID': 11,\n  'Priority': 2,\n  'Version': 2,\n  'Domain': 'monitor11.voicenter.co'\n}, {\n  'URLID': 5,\n  'Priority': 0,\n  'Version': 2,\n  'Domain': 'monitor5.voicenter.co.il'\n}];\n","\nclass Logger {\n  constructor(options = {}) {\n    this.debug = options.debug\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _log(message, data) {\n    let toLog = data ? `${message}, %c Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.log(`%c ${now}: %c ${toLog}`, `color: #276749;`, `color: #4299e1;`, `color: #2c3e50;`)\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _error(message, data) {\n    let toLog = data ? `${message}, Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.error(`${now}: ${toLog}`)\n  }\n\n  /**\n   * Logs messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  log(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._log(message)\n      } else {\n        this._log(message, data)\n      }\n    }\n  }\n  /**\n   * Logs error messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  error(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._error(message)\n      } else {\n        this._error(message, data)\n      }\n    }\n  }\n}\n\nexport default Logger\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","import eventTypes from '../eventTypes';\n\nexport const sdkEventReasons = {\n  NEWCALL: 'NEWCALL',\n  ANSWER: 'ANSWER',\n  HANGUP: 'HANGUP'\n}\nconst offlineEvents = [\n  eventTypes.CONNECT_ERROR,\n  eventTypes.CONNECT_TIMEOUT,\n  eventTypes.DISCONNECT,\n  eventTypes.RECONNECT_ATTEMPT,\n  eventTypes.RECONNECTING,\n  eventTypes.RECONNECT_ERROR,\n  eventTypes.RECONNECT_FAILED,\n  sdkEventReasons.CLOSE\n]\nfunction isSocketOffline(event) {\n  let { name } = event\n  return offlineEvents.includes(name)\n}\n\nexport default function onNewEvent({ eventData, store, extensionsModuleName }) {\n  debugger\n  let {name, data} = eventData\n  store.commit('extensions/SET_IS_SOCKET_OFFLINE', isSocketOffline(eventData))\n  switch (name) {\n    case eventTypes.ALL_EXTENSION_STATUS:\n      store.dispatch('extensions/setExtensions', data.extensions)\n      break;\n    case eventTypes.EXTENSION_EVENT:\n      let extension = data.data\n      // Event reason: NEWCALL/ANSWER/HANGUP\n      extension['lastEvent'] = {\n        reason: data.reason,\n        ivrid: data.ivruniqueid\n      }\n      const extensions = store.state[extensionsModuleName].extensions\n      let index = extensions.findIndex(e => e.userID === extension.userID)\n      if (index !== -1) {\n        store.dispatch('extensions/updateExtension', {index, extension})\n      }\n      break;\n    case eventTypes.LOGIN:\n      store.commit('extensions/SET_SERVER_TIME', data)\n      break;\n    default:\n      break;\n  }\n}\n","import colors from \"./colors\";\n\nexport const callStatuses = {\n  CALLING: 100,\n  HOLD: 101,\n}\n\nexport default {\n  1: {\n    icon: \"IconLogin\",\n    color: colors.LOGIN_COLOR,\n    text: 'status.login',\n    value: 1\n  },\n  2: {\n    icon: \"IconLogout\",\n    color: colors.LOGOUT_COLOR,\n    text: 'status.logout',\n    value: 2\n  },\n  3: {\n    icon: \"IconLunch\",\n    color: colors.LUNCH_COLOR,\n    text: 'status.lunch',\n    value: 3\n  },\n  5: {\n    icon: \"IconAdministrative\",\n    color: colors.ADMINISTRATIVE_COLOR,\n    text: 'status.administrative',\n    value: 5\n  },\n  7: {\n    icon: \"IconPrivate\",\n    color: colors.PRIVATE_COLOR,\n    text: 'status.private',\n    value: 7\n  },\n  9: {\n    icon: \"IconOther\",\n    color: colors.OTHER_COLOR,\n    text: 'status.other',\n    value: 9\n  },\n  11: {\n    icon: \"IconTraining\",\n    color: colors.TRAINING_COLOR,\n    text: 'status.training',\n    value: 11\n  },\n  12: {\n    icon: \"IconTeamMeeting\",\n    color: colors.TEAM_MEETING_COLOR,\n    text: 'status.teamMeeting',\n    value: 12\n  },\n  13: {\n    icon: \"IconBrief\",\n    color: colors.BRIEF_COLOR,\n    text: 'status.brief',\n    value: 13\n  },\n  100: {\n    icon: 'IconIncomingCall',\n    color: colors.LIGHT_GREEN,\n    text: 'status.incall',\n    value: 100\n  },\n  101: {\n    icon: 'IconHold',\n    color: colors.HOLD_COLOR,\n    text: 'status.hold',\n    value: 101\n  }\n}\n","import { callStatuses } from '../utils/statusTypes';\n\nconst ISRAEL_TIMEZONE_OFFSET = 180 * 60 * 1000;\nconst MINUTE = 60 * 1000\nconst LOGOUT_STATUS = 2;\nconst LOGIN_STATUS = 1;\nconst HOLD_STATUS = 'hold'\n\nconst types = {\n    SET_EXTENSIONS: 'SET_EXTENSIONS',\n    UPDATE_EXTENSIONS: 'UPDATE_EXTENSIONS',\n    SET_SERVER_TIME: 'SET_SERVER_TIME',\n    SET_IS_SOCKET_OFFLINE: 'SET_IS_SOCKET_OFFLINE',\n};\nconst state = {\n    extensions: [],\n    serverTime: null,\n    serverDelta: 0,\n    serverOffset: 0,\n    isSocketOffline: false,\n    offlineSocketTimestamp: null\n};\n\nconst mutations = {\n    [types.SET_EXTENSIONS]: (state, value) => {\n        state.extensions = value\n    },\n    [types.UPDATE_EXTENSIONS]: (state, {index, extension}) => {\n        state.extensions.splice(index, 1, extension)\n    },\n    [types.SET_SERVER_TIME]: (state, value) => {\n        state.serverOffset = value.servertimeoffset * 60 * 1000 || ISRAEL_TIMEZONE_OFFSET\n        state.serverTime = value.servertime * 1000 - state.serverOffset\n        state.serverDelta = new Date().getTime() - state.serverTime\n    },\n    [types.SET_IS_SOCKET_OFFLINE]: (state, value) => {\n        state.isSocketOffline = value\n        if (value) {\n            state.offlineSocketTimestamp = new Date().getTime()\n        } else {\n            state.offlineSocketTimestamp = null\n        }\n    }\n};\n\nconst actions = {\n    async setExtensions({commit}, value) {\n        commit(types.SET_EXTENSIONS, value)\n    },\n    async updateExtension({commit}, value) {\n        commit(types.UPDATE_EXTENSIONS, value)\n    },\n};\n\nconst getters = {\n  isSocketOffline: state => {\n    if (!state.offlineSocketTimestamp || isNaN(state.offlineSocketTimestamp)) {\n      return false\n    }\n    const now = new Date().getTime()\n    // show after 1 minute of disconnect\n    return state.isSocketOffline && now - state.offlineSocketTimestamp > MINUTE\n  },\n  extensionsWithCalls: state => hideLoggedOutUsers => {\n    let groupedExtensions = [];\n\n    state.extensions.forEach((extension) => {\n\n      if (extension.calls.length > 0) {\n        if (extension.calls.filter((call) => call.answered && call.callstatus === HOLD_STATUS).length) {\n          extension['representativeStatus'] = callStatuses.HOLD;\n        } else {\n          extension['representativeStatus'] = callStatuses.CALLING;\n        }\n      }\n      groupedExtensions.push(extension);\n    });\n\n    if (hideLoggedOutUsers) {\n      return groupedExtensions.filter(e => e.representativeStatus !== LOGOUT_STATUS);\n    }\n    return groupedExtensions;\n  },\n  extensionCountByStatus: (state, getters) => status => {\n    return getters.extensionWithCalls.filter(el => el.representativeStatus === status).length || 0\n  }\n}\n\nexport default {\n    namespaced: true,\n    state,\n    mutations,\n    actions,\n    getters,\n};\n","import io from 'socket.io-client/socket.io';\nimport eventTypes from './eventTypes';\nimport { defaultServers } from './config';\nimport Logger from './Logger';\nimport debounce from 'lodash/debounce'\nimport handleStoreEvents from './store/handleStoreEvents'\nimport extensionsModule from './store/extensions'\nimport { getServerWithHighestPriority } from './utils';\n\nconst defaultOptions = {\n  url: `https://monitorapi.voicenter.co.il/monitorAPI/getMonitorUrls`,\n  servers: defaultServers,\n  token: null,\n  forceNew: true,\n  reconnectionDelay: 10000,\n  reconnectionDelayMax: 10000,\n  maxReconnectAttempts: 2,\n  timeout: 10000,\n  keepAliveTimeout: 60000,\n  idleTimeout: 60000 * 5, // 5 minutes\n  protocol: 'https',\n  transports: ['websocket'],\n  upgrade: false,\n  store: null,\n  extensionsModuleName: 'sdkExtensions',\n  serverFetchStrategy: 'remote', // get servers from external url options: remote | static\n  serverType: null, // can be 1 or 2. 2 is used for chrome extension\n};\n\nlet allConnections = [];\nlet listenersMap = new Map();\nclass EventsSDK {\n  constructor(options = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n    this.argumentOptions = {\n      ...options\n    }\n    if (!this.options.token) {\n      throw new Error('A token property should be provided');\n    }\n    this.Logger = new Logger(this.options);\n    this.servers = [];\n    this.server = null;\n    this.socket = null;\n    this.connected = false;\n    this.connectionEstablished = false;\n    this.lastKeepAliveTimestamp = new Date().getTime()\n    this._initReconnectOptions();\n    this._listenersMap = listenersMap;\n    this._retryConnection = debounce(this._connect.bind(this), this.reconnectOptions.reconnectionDelay, { leading: true, trailing: false })\n    this._loginEventTriggered = false\n    this._lastLoginTimestamp = null\n    this._lastPong = null\n    this._handleLocalEvents = false\n    this._registerExtensionsModule()\n  }\n\n  _registerExtensionsModule() {\n    const { store } = this.options\n    if (!store) {\n      return\n    }\n    const moduleName = this.options.extensionsModuleName || 'sdkExtensions'\n    store.registerModule(moduleName, extensionsModule)\n    this._handleLocalEvents = true\n  }\n\n  _initReconnectOptions() {\n    this.reconnectOptions = {\n      retryCount: 1,\n      maxReconnectAttempts: this.options.maxReconnectAttempts,\n      reconnectionDelay: this.options.reconnectionDelay, // 10 seconds. After each re-connection attempt this number will increase (minReconnectionDelay * attempts) => 10, 20, 30, 40 seconds ... up to 5min\n      minReconnectionDelay: this.options.reconnectionDelay, // 10 seconds\n      maxReconnectionDelay: 60000 * 5 // 5 minutes\n    }\n  }\n\n  _onConnect() {\n    this._initReconnectDelays();\n    this.connected = true;\n    this.Logger.log(eventTypes.CONNECT, this.reconnectOptions);\n  }\n\n  _initReconnectDelays() {\n    this.reconnectOptions.retryCount = 1;\n    let minReconnectDelay = this.reconnectOptions.minReconnectionDelay;\n    this.reconnectOptions.reconnectionDelay = minReconnectDelay;\n    this.socket.io.reconnectionDelay(minReconnectDelay);\n    this.socket.io.reconnectionDelayMax(minReconnectDelay);\n  }\n\n  _onConnectError(data) {\n    this._retryConnection('next');\n    this.connected = false;\n    this.Logger.log(eventTypes.CONNECT_ERROR, data)\n  }\n\n  _onError(err) {\n    this.Logger.log(eventTypes.ERROR, err);\n  }\n\n  _onReconnectFailed() {\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.RECONNECT_FAILED, this.reconnectOptions);\n  }\n\n  _onConnectTimeout() {\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.CONNECT_TIMEOUT, this.reconnectOptions)\n  }\n\n  _onReconnectAttempt() {\n    if (this.reconnectOptions.retryCount >= this.reconnectOptions.maxReconnectAttempts) {\n      this._retryConnection('next');\n      return;\n    }\n    if (this.reconnectOptions.reconnectionDelay < this.reconnectOptions.maxReconnectionDelay) {\n      let newDelay = this.reconnectOptions.minReconnectionDelay * this.reconnectOptions.retryCount;\n      this.reconnectOptions.reconnectionDelay = newDelay;\n      this.socket.io.reconnectionDelay(newDelay);\n      this.socket.io.reconnectionDelayMax(newDelay);\n    }\n    this.reconnectOptions.retryCount++;\n    this.Logger.log(eventTypes.RECONNECT_ATTEMPT, this.reconnectOptions)\n  }\n\n  _onDisconnect(reason) {\n    this.connected = false;\n    this.Logger.log(eventTypes.DISCONNECT, reason);\n    this._connect('next')\n  }\n\n  _onKeepAlive(data) {\n    if (typeof data === 'object' && data.errorCode !== 0) {\n      this._initSocketConnection();\n      return\n    }\n    if (data && this.connected) {\n      this.Logger.log(eventTypes.KEEP_ALIVE_RESPONSE);\n      this.lastKeepAliveTimestamp = new Date().getTime()\n    } else {\n      this._initSocketConnection();\n    }\n  }\n\n  _onLoginResponse(data) {\n    if (data.ErrorCode === 0 && data.Token && !this.options.token) {\n      this.options.token = data.Token\n    }\n  }\n\n  _onPong() {\n    this._lastPong = new Date().getTime()\n  }\n\n  _parsePacket(packet) {\n    if (!packet.data) {\n      return {};\n    }\n    let name = packet.data[0];\n    let data = packet.data[1];\n    return {\n      name,\n      data\n    };\n  }\n\n  _connect(server = 'default') {\n    let serverToConnect = null;\n    if (server === 'default') {\n      serverToConnect = this._findCurrentServer();\n    } else if (server === 'next') {\n      serverToConnect = this._findNextAvailableServer()\n    } else if (server === 'prev') {\n      serverToConnect = this._findMaxPriorityServer()\n    } else {\n      throw new Error(`Incorrect 'server' parameter passed to connect function ${server}. Should be 'default' or 'next'`)\n    }\n    if (!serverToConnect) {\n      this.server = this._findCurrentServer();\n    }\n    this._initSocketConnection();\n    this._initSocketEvents();\n    this._initKeepAlive();\n    this._initReconnectDelays();\n    this.login()\n  }\n\n  _checkInit() {\n    if (!this.connectionEstablished) {\n      throw new Error('Make sure you call \"sdk.init()\" before doing other operations.')\n    }\n  }\n\n  _initSocketConnection() {\n    let domain = this.server.Domain;\n    let protocol = this.options.protocol;\n    let url = `${protocol}://${domain}`;\n    this.Logger.log('Connecting to..', url);\n    this.closeAllConnections();\n    this.socket = io(url, {\n      ...this.options,\n      query: {\n        token: this.options.token\n      },\n      debug: false\n    });\n    allConnections.push(this.socket);\n    this.connectionEstablished = true;\n    this._loginEventTriggered = false\n  }\n\n  _initSocketEvents() {\n    this.socket.onevent = this._onEvent.bind(this)\n  }\n\n  _initKeepAlive() {\n    if (this.keepAliveInterval) {\n      clearInterval(this.keepAliveInterval)\n    }\n\n    if (this.idleInterval) {\n      clearInterval((this.idleInterval))\n    }\n    this.keepAliveInterval = setInterval(()=>{\n      const now = new Date().getTime()\n      const maxDelay = this.options.keepAliveTimeout * 3\n      // If keep alive timeout is 1 minute and we still don't get a response after 3 minutes, find another server\n      if (now > this.lastKeepAliveTimestamp + maxDelay) {\n        this._connect('next')\n      }\n      if (!this.socket) {\n        this._initSocketConnection();\n        return\n      }\n      this.emit(eventTypes.KEEP_ALIVE, this.options.token);\n    }, this.options.keepAliveTimeout);\n\n    this.idleInterval = setInterval(() => {\n      this.reSync(false)\n      // if we are idle for more time, try reconnecting\n      if (this._lastPong + this.options.idleTimeout * 3 > new Date().getTime()) {\n        this._connect('next')\n      }\n    }, this.options.idleTimeout)\n  }\n\n  _findCurrentServer() {\n    let server = null;\n    if (this.servers.length) {\n      server = this.servers[0];\n    }\n    this.server = server;\n    if (!this.server) {\n      throw new Error('Could not find any server to establish connection with');\n    }\n    return this.server;\n  }\n\n  _findNextAvailableServer() {\n    let currentServerPriority = this.server.Priority;\n    this.Logger.log(`Failover -> Trying to find another server`);\n    if (currentServerPriority > 0) {\n      let nextServerPriority = currentServerPriority - 1;\n      let nextServer = this.servers.find(server => server.Priority === nextServerPriority);\n      if (!nextServer) {\n        nextServer = this._findMaxPriorityServer();\n        if (!nextServer) {\n          return\n        }\n      }\n      if (this.server.Domain !== nextServer.Domain) {\n        this.server = nextServer;\n        return this.server\n      }\n      this.Logger.log(`Failover -> Found new server. Connecting to it...`, this.server);\n    }\n    return null\n  }\n\n  _findMaxPriorityServer() {\n    this.Logger.log(`Fallback -> Trying to find previous server`, '_findMaxPriorityServer');\n    let maxPriorityServer = getServerWithHighestPriority(this.servers);\n    if(this.server && maxPriorityServer.Domain !== this.server.Domain) {\n      this.server = maxPriorityServer;\n      this.Logger.log(`Fallback -> Trying to find previous server`, this.server);\n      return this.server\n    }\n    return null\n  }\n\n  async _getServers() {\n    // Ignore server fetch if we have a list of servers passed via options\n    if (this.options.serverFetchStrategy === 'static' && this.argumentOptions.servers && Array.isArray(this.argumentOptions.servers) && this.argumentOptions.servers.length > 1) {\n      this.servers = this.argumentOptions.servers\n      return\n    }\n    try {\n      let params = {};\n      if (this.options.serverType) {\n        params.type = this.options.serverType\n      }\n      let res = await fetch(`${this.options.url}/${this.options.token}`, params);\n      this.servers = await res.json();\n    } catch (e) {\n      this.servers = this.argumentOptions.servers || defaultServers;\n    }\n  }\n\n  _onEvent(packet) {\n    if (!packet.data) {\n      return;\n    }\n    let evt = this._parsePacket(packet);\n    this.Logger.log(`New event -> ${evt.name}`, evt);\n    this._listenersMap.forEach((callback, eventName) => {\n      if (eventName === '*') {\n        callback(evt);\n      } else if (evt.name === eventName) {\n        callback(evt);\n      }\n    })\n    const eventMappings = {\n      [eventTypes.RECONNECT_ATTEMPT]: this._onReconnectAttempt,\n      [eventTypes.RECONNECT_FAILED]: this._onReconnectFailed,\n      [eventTypes.CONNECT]: this._onConnect,\n      [eventTypes.DISCONNECT]: this._onDisconnect,\n      [eventTypes.ERROR]: this._onError,\n      [eventTypes.CONNECT_ERROR]: this._onConnectError,\n      [eventTypes.CONNECT_TIMEOUT]: this._onConnectTimeout,\n      [eventTypes.KEEP_ALIVE_RESPONSE]: this._onKeepAlive,\n      [eventTypes.LOGIN_RESPONSE]: this._onLoginResponse,\n      [eventTypes.PONG]: this._onPong,\n      [eventTypes.EXTENSION_UPDATED]: this._retryConnection,\n      [eventTypes.QUEUES_UPDATED]: this._retryConnection,\n      [eventTypes.DIALERS_UPDATED]: this._retryConnection,\n      [eventTypes.LOGIN_STATUS]: () => {\n        if (!this.connected) {\n          this._onConnect()\n        }\n      }\n    }\n    const eventHandler = eventMappings[evt.name]\n    if (eventHandler && typeof eventHandler === 'function') {\n      eventHandler.call(this, evt.data)\n    }\n    if (this._handleLocalEvents) {\n      handleStoreEvents({\n        eventData: evt,\n        ...this\n      })\n    }\n  }\n\n  /**\n   * Initializes socket connection. Should be called before any other action\n   * @return {Promise<boolean>}\n   */\n  async init() {\n    if (this.connectionEstablished) {\n      return true;\n    }\n    if (this.socket) {\n      this.emit(eventTypes.CLOSE)\n    }\n    await this._getServers();\n    this._connect();\n    this._initReconnectDelays();\n    return true\n  }\n\n  /**\n   * Sets the monitor code token\n   * @param token\n   */\n  async setToken(token) {\n    this.options.token = token\n    this.disconnect()\n    await this.init()\n  }\n  /**\n   * Closes all existing connections\n   */\n  closeAllConnections() {\n    allConnections.forEach(connection => {\n      connection.close()\n      connection.disconnect()\n    })\n    allConnections = []\n    if (this.socket) {\n      this.socket.disconnect()\n      this.socket = null\n    }\n  }\n  /**\n   * Disconnects the socket instance from the servers\n   */\n  disconnect() {\n    this._listenersMap = new Map();\n    this.closeAllConnections()\n  }\n\n  /**\n   * Listens for new events\n   * @param {string} eventName (name of the event, * for all events)\n   * @param {function} callback (callback function when even with the specified name is received)\n   */\n  on(eventName, callback) {\n    this._listenersMap.set(eventName, callback);\n    this._checkInit()\n  }\n\n  /**\n   * Emits an event to the server\n   * @param {string} eventName (name of the event)\n   * @param {object} data (data for the event)\n   */\n\n  emit(eventName, data = {}) {\n    this._checkInit();\n    this.Logger.log(`EMIT -> ${eventName}`, data);\n    this.socket.emit(eventName, data);\n  }\n\n  /**\n   * Calls resync event to resync socket data\n   * @param cache\n   */\n  reSync(cache = true) {\n    this.emit(eventTypes.RESYNC, { cache })\n  }\n\n  async setMonitorUrl(url) {\n    const oldUrl = this.options.url\n    const oldStrategy = this.options.serverFetchStrategy\n    try {\n      if (!url) {\n        return\n      }\n      this.options.url = url\n      this.options.serverFetchStrategy = 'remote'\n      await this.init()\n    } catch (err) {\n      this._onError(err)\n      this.options.url = oldUrl\n      this.options.serverFetchStrategy = oldStrategy\n      await this.init()\n    }\n  }\n\n  /**\n   * Login (logs in based on the token/credentials provided)\n   * @param type (login type. Can be token/user/code/account)\n   * @return {Promise<void>}\n   */\n  login(type = 'login') {\n    // throttle login for 1 second\n    const delay = 1000\n    if (this._lastLoginTimestamp + delay > new Date().getTime()) {\n      return Promise.resolve()\n    }\n    let _self = this;\n    this._checkInit();\n    let resolved = false;\n    this._lastLoginTimestamp = new Date().getTime()\n    return new Promise((resolve, reject) => {\n      this.on(eventTypes.LOGIN_STATUS, data => {\n        if(_self.onLogin) _self.onLogin(data);\n        resolved = true;\n        resolve(data)\n      });\n      this.socket.on(eventTypes.ERROR, err => {\n        if(_self.onError) _self.onError(err);\n        if(resolved === false) {\n          reject(err);\n        }\n      })\n      if (type === 'login') {\n        this.emit(eventTypes.LOGIN, { token: this.options.token });\n      } else if (type === 'user') {\n        this.emit(eventTypes.LOGIN_USER, { user: this.options.user, password: this.options.password });\n      } else if (type === 'code') {\n        this.emit(eventTypes.LOGIN_CODE, { code: this.options.code, orgCode: this.options.organizationCode });\n      } else if (type === 'account') {\n        this.emit(eventTypes.LOGIN_USER, { user: this.options.user, password: this.options.password });\n      }\n    });\n  }\n\n}\n\nexport default EventsSDK;\n","export function getServerWithHighestPriority(servers) {\n  let chosenServer = null\n  let maxPriority = -1\n  servers.forEach(server => {\n    if (server.Priority > maxPriority) {\n      maxPriority = server.Priority\n      chosenServer = server\n    }\n  })\n  return chosenServer\n}\n","const version = '__VERSION__'\nimport sdk from './sdk'\nif (typeof window !== 'undefined') {\n  // Make it available on window\n  window.EventsSDK = sdk\n}\n\nexport default sdk\n"],"names":["LOGIN_STATUS","LOGIN","LOGIN_USER","LOGIN_CODE","LOGIN_ACCOUNT","LOGIN_RESPONSE","QUEUE_EVENT","QUEUES_UPDATED","DIALERS_UPDATED","EXTENSION_EVENT","EXTENSION_UPDATED","ALL_EXTENSION_STATUS","CONNECT_ERROR","CONNECT_TIMEOUT","DISCONNECT","PONG","RECONNECT","RECONNECT_ATTEMPT","RESYNC","RECONNECTING","RECONNECT_ERROR","RECONNECT_FAILED","KEEP_ALIVE","KEEP_ALIVE_RESPONSE","CLOSE","ERROR","defaultServers","Logger","options","debug","message","data","toLog","JSON","stringify","now","Date","toUTCString","console","log","error","this","_log","_error","value","type","global","Object","freeSelf","self","freeGlobal","Function","root","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","isOwn","call","tag","unmasked","e","result","nullTag","undefinedTag","getRawTag","objectToString","symbolTag","isObjectLike","baseGetTag","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","isSymbol","isObject","other","valueOf","replace","isBinary","test","slice","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","toNumber","cancel","flush","offlineEvents","eventTypes","NEWCALL","ANSWER","HANGUP","onNewEvent","eventData","store","extensionsModuleName","name","commit","event","includes","isSocketOffline","dispatch","extensions","extension","reason","ivrid","ivruniqueid","index","state","findIndex","userID","callStatuses","types","namespaced","serverTime","serverDelta","serverOffset","offlineSocketTimestamp","mutations","splice","servertimeoffset","servertime","getTime","actions","setExtensions","updateExtension","getters","isNaN","extensionsWithCalls","hideLoggedOutUsers","groupedExtensions","forEach","calls","length","filter","answered","callstatus","push","representativeStatus","extensionCountByStatus","status","extensionWithCalls","el","defaultOptions","url","servers","token","forceNew","reconnectionDelay","reconnectionDelayMax","maxReconnectAttempts","timeout","keepAliveTimeout","idleTimeout","protocol","transports","upgrade","serverFetchStrategy","serverType","allConnections","listenersMap","Map","EventsSDK","argumentOptions","Error","server","socket","connected","connectionEstablished","lastKeepAliveTimestamp","_initReconnectOptions","_listenersMap","_retryConnection","debounce","_connect","bind","reconnectOptions","_loginEventTriggered","_lastLoginTimestamp","_lastPong","_handleLocalEvents","_registerExtensionsModule","moduleName","registerModule","extensionsModule","retryCount","minReconnectionDelay","maxReconnectionDelay","_initReconnectDelays","CONNECT","minReconnectDelay","io","err","newDelay","_typeof","errorCode","_initSocketConnection","ErrorCode","Token","packet","serverToConnect","_findCurrentServer","_findNextAvailableServer","_findMaxPriorityServer","_initSocketEvents","_initKeepAlive","login","domain","Domain","closeAllConnections","query","onevent","_onEvent","keepAliveInterval","clearInterval","idleInterval","setInterval","maxDelay","_this","emit","reSync","currentServerPriority","Priority","nextServerPriority","nextServer","find","chosenServer","maxPriority","maxPriorityServer","Array","isArray","params","res","fetch","json","evt","_parsePacket","callback","eventName","eventHandler","_onReconnectAttempt","_onReconnectFailed","_onConnect","_onDisconnect","_onError","_onConnectError","_onConnectTimeout","_onKeepAlive","_onLoginResponse","_onPong","_this2","handleStoreEvents","_getServers","disconnect","init","connection","close","set","_checkInit","cache","oldUrl","oldStrategy","Promise","resolve","_self","resolved","reject","_this3","on","onLogin","onError","user","password","code","orgCode","organizationCode","window","sdk"],"mappings":"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"}