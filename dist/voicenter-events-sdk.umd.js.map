{"version":3,"file":"voicenter-events-sdk.umd.js","sources":["../src/eventTypes.js","../src/config.js","../src/Logger.js","../node_modules/lodash/isObject.js","../node_modules/lodash/_freeGlobal.js","../node_modules/lodash/_root.js","../node_modules/lodash/now.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_getRawTag.js","../node_modules/lodash/_objectToString.js","../node_modules/lodash/_baseGetTag.js","../node_modules/lodash/isObjectLike.js","../node_modules/lodash/isSymbol.js","../node_modules/lodash/toNumber.js","../node_modules/lodash/debounce.js","../src/sdk.js","../src/utils.js","../src/index.js"],"sourcesContent":["export default {\n  LOGIN: 'loginStatus',\n  LOGIN_RESPONSE: 'loginResponse',\n  QUEUE_EVENT: 'QueueEvent',\n  EXTENSION_EVENT: 'ExtensionEvent',\n  ALL_EXTENSION_STATUS: 'AllExtensionsStatus',\n  CONNECT_ERROR: 'connect_error',\n  CONNECT_TIMEOUT: 'connect_timeout',\n  DISCONNECT: 'disconnect',\n  RECONNECT: 'reconnect',\n  RECONNECT_ATTEMPT: 'reconnect_attempt',\n  RECONNECTING: 'reconnecting',\n  RECONNECT_ERROR: 'reconnect_error',\n  RECONNECT_FAILED: 'reconnect_failed',\n  KEEP_ALIVE: 'keepalive',\n  KEEP_ALIVE_RESPONSE: 'keepaliveResponse',\n  CLOSE: 'closeme',\n  SERVER_FETCH_ERROR: 'serverFetchError',\n  ERROR: 'error',\n}\n","export const defaultServers = [{\n  'URLID': 59,\n  'Priority': 5,\n  'Version': 2,\n  'Domain': 'monitor1.voicenter.co'\n}, {\n  'URLID': 3,\n  'Priority': 4,\n  'Version': 2,\n  'Domain': 'monitor3.voicenter.co.il'\n}, {\n  'URLID': 4,\n  'Priority': 3,\n  'Version': 2,\n  'Domain': 'monitor4.voicenter.co.il'\n}, {\n  'URLID': 11,\n  'Priority': 2,\n  'Version': 2,\n  'Domain': 'monitor11.voicenter.co'\n}, {\n  'URLID': 5,\n  'Priority': 0,\n  'Version': 2,\n  'Domain': 'monitor5.voicenter.co.il'\n}];\n","\nclass Logger {\n  constructor(options = {}) {\n    this.debug = options.debug\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _log(message, data) {\n    let toLog = data ? `${message}, %c Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.log(`%c ${now}: %c ${toLog}`, `color: #276749;`, `color: #4299e1;`, `color: #2c3e50;`)\n  }\n\n  /**\n   * Logs to console a colored message\n   * @param message\n   * @param data\n   * @private\n   */\n  _error(message, data) {\n    let toLog = data ? `${message}, Data -> ${JSON.stringify(data)}` : `${message}`\n    let now = new Date().toUTCString()\n    console.error(`${now}: ${toLog}`)\n  }\n\n  /**\n   * Logs messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  log(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._log(message)\n      } else {\n        this._log(message, data)\n      }\n    }\n  }\n  /**\n   * Logs error messages in case debug mode is set\n   * @param message\n   * @param data\n   */\n  error(message, data) {\n    if (this.debug) {\n      if (message && !data) {\n        this._error(message)\n      } else {\n        this._error(message, data)\n      }\n    }\n  }\n}\n\nexport default Logger\n","/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n","/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n","var freeGlobal = require('./_freeGlobal');\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n","var root = require('./_root');\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\nmodule.exports = now;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var Symbol = require('./_Symbol');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n","var Symbol = require('./_Symbol'),\n    getRawTag = require('./_getRawTag'),\n    objectToString = require('./_objectToString');\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n","/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n","var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n","var isObject = require('./isObject'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = toNumber;\n","var isObject = require('./isObject'),\n    now = require('./now'),\n    toNumber = require('./toNumber');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n\n    return maxing\n      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\n      : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nmodule.exports = debounce;\n","import io from 'socket.io-client/socket.io';\nimport eventTypes from './eventTypes';\nimport { defaultServers } from './config';\nimport Logger from './Logger';\nimport debounce from 'lodash/debounce'\nimport { getServerWithHighestPriority } from './utils';\n\nconst defaultOptions = {\n  url: `https://monitorapi.voicenter.co.il/monitorAPI/getMonitorUrls`,\n  servers: defaultServers,\n  token: null,\n  forceNew: false,\n  reconnectionDelay: 10000,\n  reconnectionDelayMax: 10000,\n  timeout: 10000,\n  keepAliveTimeout: 60000,\n  protocol: 'https',\n  transports: ['websocket'],\n  upgrade: false,\n  serverFetchStrategy: 'remote', // get servers from external url options: remote | static\n  serverType: null, // can be 1 or 2. 2 is used for chrome extension\n};\n\nlet allConnections = [];\nlet listenersMap = new Map();\nclass EventsSDK {\n  constructor(options = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    };\n    this.argumentOptions = {\n      ...options\n    }\n    if (!this.options.token) {\n      throw new Error('A token property should be provided');\n    }\n    this.Logger = new Logger(this.options);\n    this.servers = [];\n    this.server = null;\n    this.socket = null;\n    this.connected = false;\n    //this.connections = allConnections;\n    this.connectionEstablished = false;\n    this.shouldReconnect = true;\n    this._initReconnectOptions();\n    this._listenersMap = listenersMap;\n    this._retryConnection = debounce(this._connect.bind(this), this.reconnectOptions.reconnectionDelay, { leading: true, trailing: false })\n  }\n\n  _initReconnectOptions() {\n    this.reconnectOptions = {\n      retryCount: 1,\n      reconnectionDelay: this.options.reconnectionDelay, // 10 seconds. After each re-connection attempt this number will increase (minReconnectionDelay * attempts) => 10, 20, 30, 40 seconds ... up to 5min\n      minReconnectionDelay: this.options.reconnectionDelay, // 10 seconds\n      maxReconnectionDelay: 60000 * 5 // 5 minutes\n    }\n  }\n\n  _onConnect() {\n    if(this.onConnect) this.onConnect(0,\"OK\");\n    this._initReconnectDelays();\n    this.connected = true;\n    this.Logger.log(eventTypes.CONNECT, this.reconnectOptions);\n  }\n\n  _initReconnectDelays() {\n    this.reconnectOptions.retryCount = 1;\n    let minReconnectDelay = this.reconnectOptions.minReconnectionDelay;\n    this.reconnectOptions.reconnectionDelay = minReconnectDelay;\n    this.socket.io.reconnectionDelay(minReconnectDelay);\n    this.socket.io.reconnectionDelayMax(minReconnectDelay);\n  }\n\n  _onConnectError(data) {\n    if(this.onConnectError) this.onConnectError(data);\n    this._retryConnection('next');\n    this.connected = false;\n    this.Logger.log(eventTypes.CONNECT_ERROR, data)\n  }\n\n  _onError(err) {\n    if(this.onError) this.onError(data);\n    this.Logger.log(eventTypes.ERROR, data);\n  }\n\n  _onReconnectFailed() {\n    if(this.onReconnectFailed) this.onReconnectFailed();\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.RECONNECT_FAILED, this.reconnectOptions);\n  }\n\n  _onConnectTimeout() {\n    if(this.onConnectTimeout) this.onConnectTimeout();\n    this._retryConnection('next');\n    this.Logger.log(eventTypes.CONNECT_TIMEOUT, this.reconnectOptions)\n  }\n\n  _onReconnectAttempt(attempts) {\n    if(this.onReconnectAttempt) this.onReconnectAttempt(attempts);\n    if (attempts > 2) {\n      this._retryConnection('next');\n      return;\n    }\n    if (this.reconnectOptions.reconnectionDelay < this.reconnectOptions.maxReconnectionDelay) {\n      let newDelay = this.reconnectOptions.minReconnectionDelay * this.reconnectOptions.retryCount;\n      this.reconnectOptions.reconnectionDelay = newDelay;\n      this.socket.io.reconnectionDelay(newDelay);\n      this.socket.io.reconnectionDelayMax(newDelay);\n    }\n    this.reconnectOptions.retryCount++;\n    this.Logger.log(eventTypes.RECONNECT_ATTEMPT, this.reconnectOptions)\n  }\n\n  _onDisconnect(reason) {\n    if(this.onDisconnect) this.onDisconnect(reason);\n    if (this.shouldReconnect) {\n      this._connect('next')\n    }\n    this.connected = false;\n    this.Logger.log(eventTypes.DISCONNECT, this.reconnectOptions);\n  }\n\n  _onKeepAlive(data) {\n    if(this.onKeepAlive) this.onKeepAlive(data);\n    if(data === false && this.connected) {\n      this._initSocketConnection();\n      this.Logger.log(eventTypes.KEEP_ALIVE_RESPONSE, this.reconnectOptions);\n    }\n  }\n\n  _parsePacket(packet) {\n    if (!packet.data) {\n      return {};\n    }\n    let name = packet.data[0];\n    let data = packet.data[1];\n    return {\n      name,\n      data\n    };\n  }\n\n  _connect(server = 'default') {\n    this.shouldReconnect = true;\n    let serverToConnect = null;\n    if (server === 'default') {\n      serverToConnect = this._findCurrentServer();\n    } else if (server === 'next') {\n      serverToConnect = this._findNextAvailableServer()\n    } else if (server === 'prev') {\n      serverToConnect = this._findMaxPriorityServer()\n    } else {\n      throw new Error(`Incorrect 'server' parameter passed to connect function ${server}. Should be 'default' or 'next'`)\n    }\n    if (!serverToConnect) {\n      // skip the connect because we didn't find a new server to connect to.\n      return\n    }\n    this._initSocketConnection();\n    this._initSocketEvents();\n    this._initKeepAlive();\n    if (server !== 'default'){\n      this.login()\n    }\n  }\n\n  _checkInit() {\n    if (!this.connectionEstablished) {\n      throw new Error('Make sure you call \"sdk.init()\" before doing other operations.')\n    }\n  }\n\n  _initSocketConnection() {\n    let domain = this.server.Domain;\n    let protocol = this.options.protocol;\n    let url = `${protocol}://${domain}`;\n    this.Logger.log('Connecting to..', url);\n    this.closeAllConnections();\n    this.socket = io(url, {\n      ...this.options,\n      debug: false\n    });\n    allConnections.push(this.socket);\n    this.connectionEstablished = true;\n  }\n\n  _initSocketEvents() {\n    this.socket.on(eventTypes.RECONNECT_ATTEMPT, this._onReconnectAttempt.bind(this));\n    this.socket.on(eventTypes.RECONNECT_FAILED, this._onReconnectFailed.bind(this));\n    this.socket.on(eventTypes.CONNECT, this._onConnect.bind(this));\n    this.socket.on(eventTypes.DISCONNECT, this._onDisconnect.bind(this));\n    this.socket.on(eventTypes.ERROR, this._onError.bind(this));\n    this.socket.on(eventTypes.CONNECT_ERROR, this._onConnectError.bind(this));\n    this.socket.on(eventTypes.CONNECT_TIMEOUT, this._onConnectTimeout.bind(this));\n    this.socket.on(eventTypes.KEEP_ALIVE_RESPONSE, this._onKeepAlive.bind(this));\n    this.socket.onevent = this._onEvent.bind(this)\n  }\n\n  _initKeepAlive() {\n    setTimeout(()=>{\n      if(this.socket) {\n        this.emit(eventTypes.KEEP_ALIVE, this.options.token);\n        this._connect('prev');\n      }\n      else {\n        this._initSocketConnection();\n      }\n    }, this.options.keepAliveTimeout);\n  }\n\n  _findCurrentServer() {\n    let server = null;\n    if (this.servers.length) {\n      server = this.servers[0];\n    }\n    this.server = server;\n    if (!this.server) {\n      throw new Error('Could not find any server to establish connection with');\n    }\n    return this.server;\n  }\n\n  _findNextAvailableServer() {\n    let currentServerPriority = this.server.Priority;\n    this.Logger.log(`Failover -> Trying to find another server`);\n    if (currentServerPriority > 0) {\n      let nextServerPriority = currentServerPriority - 1;\n      let nextServer = this.servers.find(server => server.Priority === nextServerPriority);\n      if (!nextServer) {\n        nextServer = this._findMaxPriorityServer();\n        if (!nextServer) {\n          return\n        }\n      }\n      if (this.server.Domain !== nextServer.Domain) {\n        this.server = nextServer;\n        return this.server\n      }\n      this.Logger.log(`Failover -> Found new server. Connecting to it...`, this.server);\n    }\n    return null\n  }\n\n  _findMaxPriorityServer() {\n    this.Logger.log(`Fallback -> Trying to find previous server`, '_findMaxPriorityServer');\n    let maxPriorityServer = getServerWithHighestPriority(this.servers);\n    if(this.server && maxPriorityServer.Domain !== this.server.Domain) {\n      this.server = maxPriorityServer;\n      this.Logger.log(`Fallback -> Trying to find previous server`, this.server);\n      return this.server\n    }\n    return null\n  }\n\n  async _getServers() {\n    // Ignore server fetch if we have a list of servers passed via options\n    if (this.options.serverFetchStrategy === 'static' && this.argumentOptions.servers && Array.isArray(this.argumentOptions.servers) && this.argumentOptions.servers.length > 1) {\n      this.servers = this.argumentOptions.servers\n      return\n    }\n    try {\n      let params = {};\n      if (this.options.serverType) {\n        params.type = this.options.serverType\n      }\n      let res = await fetch(`${this.options.url}/${this.options.token}`, params);\n      this.servers = await res.json();\n    } catch (e) {\n      this.servers = this.argumentOptions.servers || defaultServers;\n      this.emit(eventTypes.SERVER_FETCH_ERROR)\n    }\n  }\n\n  _onEvent(packet) {\n    if (!packet.data) {\n      return;\n    }\n    let evt = this._parsePacket(packet);\n    this.Logger.log(`New event -> ${evt.name}`, evt);\n    this._listenersMap.forEach((callback, eventName) => {\n      if (eventName === '*') {\n        callback(evt);\n      } else if (evt.name === eventName) {\n        callback(evt);\n      }\n    })\n  }\n\n  /**\n   * Initializes socket connection. Should be called before any other action\n   * @return {Promise<boolean>}\n   */\n  async init() {\n    if (this.connectionEstablished) {\n      return true;\n    }\n    if (this.socket) {\n      this.emit(eventTypes.CLOSE)\n    }\n    await this._getServers();\n    this._connect();\n    this._initReconnectDelays();\n    return true\n  }\n\n  /**\n   * Sets the monitor code token\n   * @param token\n   */\n  setToken(token) {\n    this.options.token = token\n  }\n  /**\n   * Closes all existing connections\n   */\n  closeAllConnections() {\n    allConnections.forEach(connection => {\n      connection.close()\n    })\n    allConnections = []\n  }\n  /**\n   * Disconnects the socket instance from the servers\n   */\n  disconnect() {\n    this.shouldReconnect = false;\n    this._listenersMap = new Map();\n    this.closeAllConnections()\n  }\n\n  /**\n   * Listens for new events\n   * @param {string} eventName (name of the event, * for all events)\n   * @param {function} callback (callback function when even with the specified name is received)\n   */\n  on(eventName, callback) {\n    this._listenersMap.set(eventName, callback);\n    this._checkInit()\n  }\n\n  /**\n   * Emits an event to the server\n   * @param {string} eventName (name of the event)\n   * @param {object} data (data for the event)\n   */\n\n  emit(eventName, data = {}) {\n    this._checkInit();\n    this.Logger.log(`EMIT -> ${eventName}`, data);\n    this.socket.emit(eventName, data);\n  }\n\n  /**\n   * Login (logs in based on the token/credentials provided)\n   */\n  login() {\n    let _self = this;\n    this._checkInit();\n    let resolved = false;\n    return new Promise((resolve, reject) => {\n      this.on(eventTypes.LOGIN, data => {\n        if(_self.onLogin) _self.onLogin(data);\n        resolved = true;\n        resolve(data)\n      });\n      // this.socket.on(eventTypes.ERROR, err => {\n      //   if(_self.onError) _self.onError(err);\n      //   if(resolved === false) {\n      //     reject(err);\n      //   }\n      // })\n      this.emit('login', { token: this.options.token });\n    });\n  }\n\n}\n\nexport default EventsSDK;\n","export function getServerWithHighestPriority(servers) {\n  let chosenServer = null\n  let maxPriority = -1\n  servers.forEach(server => {\n    if (server.Priority > maxPriority) {\n      maxPriority = server.Priority\n      chosenServer = server\n    }\n  })\n  return chosenServer\n}\n","const version = '__VERSION__'\nimport sdk from './sdk'\nif (typeof window !== 'undefined') {\n  // Make it available on window\n  window.EventsSDK = sdk\n}\n\nexport default sdk\n"],"names":["LOGIN","LOGIN_RESPONSE","QUEUE_EVENT","EXTENSION_EVENT","ALL_EXTENSION_STATUS","CONNECT_ERROR","CONNECT_TIMEOUT","DISCONNECT","RECONNECT","RECONNECT_ATTEMPT","RECONNECTING","RECONNECT_ERROR","RECONNECT_FAILED","KEEP_ALIVE","KEEP_ALIVE_RESPONSE","CLOSE","SERVER_FETCH_ERROR","ERROR","defaultServers","Logger","options","debug","message","data","toLog","JSON","stringify","now","Date","toUTCString","console","log","error","this","_log","_error","value","type","global","Object","freeSelf","self","freeGlobal","Function","root","Symbol","objectProto","prototype","hasOwnProperty","nativeObjectToString","toString","symToStringTag","toStringTag","undefined","isOwn","call","tag","unmasked","e","result","nullTag","undefinedTag","getRawTag","objectToString","symbolTag","isObjectLike","baseGetTag","NAN","reTrim","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","parseInt","isSymbol","isObject","other","valueOf","replace","isBinary","test","slice","FUNC_ERROR_TEXT","nativeMax","Math","max","nativeMin","min","func","wait","lastArgs","lastThis","maxWait","timerId","lastCallTime","lastInvokeTime","leading","maxing","trailing","TypeError","invokeFunc","time","args","thisArg","apply","shouldInvoke","timeSinceLastCall","timerExpired","trailingEdge","setTimeout","timeWaiting","remainingWait","debounced","isInvoking","arguments","leadingEdge","clearTimeout","toNumber","cancel","flush","defaultOptions","url","servers","token","forceNew","reconnectionDelay","reconnectionDelayMax","timeout","keepAliveTimeout","protocol","transports","upgrade","serverFetchStrategy","serverType","allConnections","listenersMap","Map","EventsSDK","argumentOptions","Error","server","socket","connected","connectionEstablished","shouldReconnect","_initReconnectOptions","_listenersMap","_retryConnection","debounce","_connect","bind","reconnectOptions","retryCount","minReconnectionDelay","maxReconnectionDelay","onConnect","_initReconnectDelays","eventTypes","CONNECT","minReconnectDelay","io","onConnectError","err","onError","onReconnectFailed","onConnectTimeout","attempts","onReconnectAttempt","newDelay","reason","onDisconnect","onKeepAlive","_initSocketConnection","packet","name","serverToConnect","_findCurrentServer","_findNextAvailableServer","_findMaxPriorityServer","_initSocketEvents","_initKeepAlive","login","domain","Domain","closeAllConnections","push","on","_onReconnectAttempt","_onReconnectFailed","_onConnect","_onDisconnect","_onError","_onConnectError","_onConnectTimeout","_onKeepAlive","onevent","_onEvent","_this","emit","length","currentServerPriority","Priority","nextServerPriority","nextServer","find","chosenServer","maxPriority","maxPriorityServer","forEach","Array","isArray","params","res","fetch","json","evt","_parsePacket","callback","eventName","_getServers","connection","close","set","_checkInit","_self","Promise","resolve","reject","_this2","onLogin","window","sdk"],"mappings":"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"}